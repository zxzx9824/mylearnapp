{"version":3,"sources":["../../../src/@ionic-native/plugins/media/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CordovaInstance, Plugin, checkAvailability, IonicNativePlugin } from '@ionic-native/core';\n\ndeclare const Media: any;\n// TODO for ionic native 4.x ... rename plugin class to Media and use Media.getPlugin() to retrieve the original media object\n\n/**\n * @hidden\n */\nexport class MediaObject {\n\n  constructor(private _objectInstance: any) {}\n\n  /**\n   * Get the current amplitude of the current recording.\n   * @returns {Promise<any>} Returns a promise with the amplitude of the current recording\n   */\n  @CordovaInstance()\n  getCurrentAmplitude(): Promise<any> { return; }\n\n  /**\n   * Get the current position within an audio file. Also updates the Media object's position parameter.\n   * @returns {Promise<any>} Returns a promise with the position of the current recording\n   */\n  @CordovaInstance()\n  getCurrentPosition(): Promise<any> { return; }\n\n  /**\n   * Get the duration of an audio file in seconds. If the duration is unknown, it returns a value of -1.\n   * @returns {number} Returns a promise with the duration of the current recording\n   */\n  @CordovaInstance({ sync: true })\n  getDuration(): number { return; }\n\n  /**\n   * Starts or resumes playing an audio file.\n   */\n  @CordovaInstance({ sync: true })\n  play(iosOptions?: {\n    numberOfLoops?: number,\n    playAudioWhenScreenIsLocked?: boolean\n  }): void { }\n\n  /**\n   * Pauses playing an audio file.\n   */\n  @CordovaInstance({ sync: true })\n  pause(): void { }\n\n  /**\n   * Releases the underlying operating system's audio resources. This is particularly important for Android, since there are a finite amount of OpenCore instances for media playback. Applications should call the release function for any Media resource that is no longer needed.\n   */\n  @CordovaInstance({ sync: true })\n  release(): void { }\n\n  /**\n   * Sets the current position within an audio file.\n   * @param {number} milliseconds The time position you want to set for the current audio file\n   */\n  @CordovaInstance({ sync: true })\n  seekTo(milliseconds: number): void { }\n\n  /**\n   * Set the volume for an audio file.\n   * @param volume {number} The volume to set for playback. The value must be within the range of 0.0 to 1.0.\n   */\n  @CordovaInstance({ sync: true })\n  setVolume(volume: number): void { }\n\n  /**\n   * Starts recording an audio file.\n   */\n  @CordovaInstance({ sync: true })\n  startRecord(): void { }\n\n  /**\n   * Stops recording\n   */\n  @CordovaInstance({ sync: true })\n  stopRecord(): void { }\n\n  /**\n   * Pauses recording\n   */\n  @CordovaInstance({ sync: true })\n  pauseRecord(): void { }\n\n  /**\n   * Resumes recording\n   */\n  @CordovaInstance({ sync: true })\n  resumeRecord(): void { }\n\n  /**\n   * Stops playing an audio file.\n   */\n  @CordovaInstance({ sync: true })\n  stop(): void { }\n\n}\n\nexport type MediaStatusUpdateCallback = (statusCode: number) => void;\n\nexport interface MediaError {\n\n  /**\n   * Error message\n   */\n  message: string;\n\n  /**\n   * Error code\n   */\n  code: number;\n\n}\n\nexport type MediaErrorCallback = (error: MediaError) => void;\n\n/**\n * @name Media\n * @description\n * Some hints if you are using iOS and recording doesn't work:\n * 1.) Try to use a absolute file path but remove beginning \"file://\".\n * Then it looks like: `/var/mobile/Containers/Data/Application/AF438B8B-7724-4FBB-8E69-083463224FC4/tmp/my_file.m4a`\n * Example: `this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a')`\n * 2.) If that's not working, too, create the file before using.\n * Example:\n * ```typescript\n * import { MediaPlugin, MediaObject } from '@ionic-native/media';\n * import { File } from '@ionic-native/file';\n *\n * ...\n *\n * constructor(private media: MediaPlugin, private file: File) { }\n *\n * ...\n *\n * this.file.createFile(this.file.tempDirectory, 'my_file.m4a', true).then(() => {\n *   let file = this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a');\n *   file.startRecord();\n *   window.setTimeout(() => file.stopRecord(), 10000);\n * });\n * ```\n *\n * You can find the reasons here: https://github.com/ionic-team/ionic-native/issues/1452#issuecomment-299605906\n *\n * @usage\n * ```typescript\n * import { MediaPlugin, MediaObject } from '@ionic-native/media';\n *\n *\n * constructor(private media: MediaPlugin) { }\n *\n *\n * ...\n *\n *\n * // Create a MediaPlugin instance.  Expects path to file or url as argument\n * // We can optionally pass a second argument to track the status of the media\n *\n * const onStatusUpdate = (status) => console.log(status);\n * const onSuccess = () => console.log('Action is successful.');\n * const onError = (error) => console.error(error.message);\n *\n * const file: MediaObject = this.media.create('path/to/file.mp3', onStatusUpdate, onSuccess, onError);\n *\n * // play the file\n * file.play();\n *\n * // pause the file\n * file.pause();\n *\n * // get current playback position\n * file.getCurrentPosition().then((position) => {\n *   console.log(position);\n * });\n *\n * // get file duration\n * let duration = file.getDuration();\n * console.log(duration);\n *\n * // skip to 10 seconds (expects int value in ms)\n * file.seekTo(10000);\n *\n * // stop playing the file\n * file.stop();\n *\n * // release the native audio resource\n * // Platform Quirks:\n * // iOS simply create a new instance and the old one will be overwritten\n * // Android you must call release() to destroy instances of media when you are done\n * file.release();\n *\n *\n *\n * // Recording to a file\n * const file: MediaObject = this.media.create('path/to/file.mp3');\n *\n * file.startRecord();\n *\n * file.stopRecord();\n *\n *\n * ```\n * @classes\n * MediaObject\n * @interfaces\n * MediaError\n */\n@Plugin({\n  pluginName: 'MediaPlugin',\n  repo: 'https://github.com/apache/cordova-plugin-media',\n  plugin: 'cordova-plugin-media',\n  pluginRef: 'Media',\n  platforms: ['Android', 'BlackBerry 10', 'Browser', 'iOS', 'Tizen', 'Ubuntu', 'Windows', 'Windows Phone']\n})\n\nexport class MediaPlugin extends IonicNativePlugin {\n\n  // Constants\n  /**\n   * @hidden\n   */\n  MEDIA_NONE: number = 0;\n  /**\n   * @hidden\n   */\n  MEDIA_STARTING: number = 1;\n  /**\n   * @hidden\n   */\n  MEDIA_RUNNING: number = 2;\n  /**\n   * @hidden\n   */\n  MEDIA_PAUSED: number = 3;\n  /**\n   * @hidden\n   */\n  MEDIA_STOPPED: number = 4;\n\n  // error codes\n  /**\n   * @hidden\n   */\n  MEDIA_ERR_ABORTED: number = 1;\n  /**\n   * @hidden\n   */\n  MEDIA_ERR_NETWORK: number = 2;\n  /**\n   * @hidden\n   */\n  MEDIA_ERR_DECODE: number = 3;\n  /**\n   * @hidden\n   */\n  MEDIA_ERR_NONE_SUPPORTED: number = 4;\n\n  /**\n   * Open a media file\n   * @param src {string} A URI containing the audio content.\n   * @param [onStatusUpdate] {MediaStatusUpdateCallback} A callback function to be invoked when the status of the file changes\n   * @param [onSuccess] {Function} A callback function to be invoked after the current play, record, or stop action is completed\n   * @param [onError] {MediaErrorCallback} A callback function is be invoked if an error occurs.\n   * @return {MediaObject}\n   */\n  create(src: string,\n    onStatusUpdate?: MediaStatusUpdateCallback,\n    onSuccess?: Function,\n    onError?: MediaErrorCallback): MediaObject {\n\n    let instance: any;\n\n    if (checkAvailability(MediaPlugin.getPluginRef(), null, MediaPlugin.getPluginName()) === true) {\n      // Creates a new media object\n      instance = new Media(src, onSuccess, onError, onStatusUpdate);\n    }\n\n    return new MediaObject(instance);\n\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}